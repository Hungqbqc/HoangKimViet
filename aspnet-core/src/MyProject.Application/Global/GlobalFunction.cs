// This file is not generated, but this comment is necessary to exclude it from StyleCop analysis 
// <auto-generated/> 
using Abp.IO;
using Abp.IO.Extensions;
using Microsoft.AspNetCore.Http;
using MyProject.Data;
using MyProject.Net.MimeTypes;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MyProject.Global
{
     public class GlobalFunction
     {
          public static IAppFolders AppFolders { get; set; }

          public static DateTime? GetDateTime(DateTime? dateTime)
          {
               return dateTime != null ? dateTime.Value.ToLocalTime() : dateTime;
          }

          public static string RegexFormat(string input)
          {
               if (input != null)
               {
                    return Regex.Replace(input, @"\s+", " ").Trim();
               }
               else
                    return input;
          }

          /// <summary>
          /// Hàm lưu file
          /// </summary>
          /// <param name="FolderPath">Đường dẫn lưu file trên server</param>
          /// <param name="ImportFile">File</param>
          /// <returns>Đường dẫn trỏ tới file trên server</returns>
          public static string SaveFile(string FolderPath, IFormFile ImportFile)
          {
               byte[] fileBytes;
               using (var stream = ImportFile.OpenReadStream())
               {
                    fileBytes = stream.GetAllBytes();
               }

               string uploadFileName = string.Format("{0:yyyyMMdd_hhmmss}_", DateTime.Now) + ImportFile.FileName;

               // Set full path to upload file
               DirectoryHelper.CreateIfNotExists(FolderPath);
               string uploadFilePath = Path.Combine(FolderPath, uploadFileName);

               // Save new file
               File.WriteAllBytes(uploadFilePath, fileBytes);

               return uploadFilePath;
          }

          /// <summary>
          /// Đọc file excel
          /// </summary>
          /// <param name="FilePath">Đường dẫn file excel cần đọc trên server</param>
          /// <param name="startRowIndex">Đọc từ dòng nào</param>
          /// <returns>Dữ liệu đọc được từ file excel</returns>
          public static async Task<List<List<string>>> ReadFromExcel(string FilePath, int startRowIndex = 2, int sheetIndex = 1)
          {
               List<List<string>> Result = new List<List<string>>();
               FileInfo fileInfo = new FileInfo(FilePath);
               try
               {
                    using (var excelPackage = new ExcelPackage(fileInfo))
                    {
                         var sheet = excelPackage.Workbook.Worksheets[sheetIndex];

                         if (sheet != null)
                         {
                              for (var rowIndex = 0; rowIndex < sheet.Dimension.End.Row - 1; rowIndex++)
                              {
                                   List<string> Line = new List<string>();

                                   for (var colIndex = 0; colIndex < sheet.Dimension.Columns; colIndex++)
                                   {
                                        var Value = sheet.Cells[rowIndex + startRowIndex, colIndex + 1].Value;
                                        Line.Add(Value != null ? Value.ToString() : "");
                                   }
                                   Result.Add(Line);
                              }
                         }
                    }
               }
               catch (Exception gggg)
               {

                    throw gggg;
               }
               return await Task.FromResult(Result);
          }
          /// <summary>
          /// Tải file mẫu
          /// </summary>
          /// <param name="FileName">Tên file cần tải</param>
          /// <param name="pathFileDownload">Thư mục chứa file cần tải</param>
          /// <param name="pathFileToken">Thư mục chứa token down ( Không được sửa )</param>
          /// <returns></returns>
          public static Task<FileDto> DownloadFileMau(string FileName, string pathFileDownload, string pathFileToken)
          {
               var result = new FileDto(FileName, MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet);
               string SourceFile = Path.Combine(pathFileDownload, FileName);
               string DestinationFile = Path.Combine(pathFileToken, result.FileToken);
               File.Copy(SourceFile, DestinationFile, true);
               return Task.FromResult(result);
          }
     }
}
